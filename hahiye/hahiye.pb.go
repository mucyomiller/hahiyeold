// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hahiye.proto

package hahiye

/*
Hahiye Service

Hahiye Service API consists of a multiple service which returns their  messages.
We will decouple Individual service in future
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// creating common message type used by varies services
//
// StatusResponse represent response from service and their description
type StatusResponse struct {
	StatusCode           string   `protobuf:"bytes,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_hahiye_5a3f7662e55318bd, []int{0}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusResponse.Unmarshal(m, b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
}
func (dst *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(dst, src)
}
func (m *StatusResponse) XXX_Size() int {
	return xxx_messageInfo_StatusResponse.Size(m)
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatusCode() string {
	if m != nil {
		return m.StatusCode
	}
	return ""
}

func (m *StatusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Authentication Service
//
// AuthRequest
type AuthRequest struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRequest) Reset()         { *m = AuthRequest{} }
func (m *AuthRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()    {}
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hahiye_5a3f7662e55318bd, []int{1}
}
func (m *AuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRequest.Unmarshal(m, b)
}
func (m *AuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRequest.Marshal(b, m, deterministic)
}
func (dst *AuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRequest.Merge(dst, src)
}
func (m *AuthRequest) XXX_Size() int {
	return xxx_messageInfo_AuthRequest.Size(m)
}
func (m *AuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRequest proto.InternalMessageInfo

func (m *AuthRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// AuthResponse
type AuthResponse struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthResponse) Reset()         { *m = AuthResponse{} }
func (m *AuthResponse) String() string { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()    {}
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_hahiye_5a3f7662e55318bd, []int{2}
}
func (m *AuthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthResponse.Unmarshal(m, b)
}
func (m *AuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthResponse.Marshal(b, m, deterministic)
}
func (dst *AuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthResponse.Merge(dst, src)
}
func (m *AuthResponse) XXX_Size() int {
	return xxx_messageInfo_AuthResponse.Size(m)
}
func (m *AuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthResponse proto.InternalMessageInfo

func (m *AuthResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Account represent Account model and its properties
type Account struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Username             string               `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password             string               `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Email                string               `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	ProfileUrl           string               `protobuf:"bytes,6,opt,name=profile_url,json=profileUrl,proto3" json:"profile_url,omitempty"`
	Verified             bool                 `protobuf:"varint,7,opt,name=verified,proto3" json:"verified,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_hahiye_5a3f7662e55318bd, []int{3}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (dst *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(dst, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Account) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Account) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Account) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Account) GetProfileUrl() string {
	if m != nil {
		return m.ProfileUrl
	}
	return ""
}

func (m *Account) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *Account) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type AccountRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountRequest) Reset()         { *m = AccountRequest{} }
func (m *AccountRequest) String() string { return proto.CompactTextString(m) }
func (*AccountRequest) ProtoMessage()    {}
func (*AccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hahiye_5a3f7662e55318bd, []int{4}
}
func (m *AccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountRequest.Unmarshal(m, b)
}
func (m *AccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountRequest.Marshal(b, m, deterministic)
}
func (dst *AccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountRequest.Merge(dst, src)
}
func (m *AccountRequest) XXX_Size() int {
	return xxx_messageInfo_AccountRequest.Size(m)
}
func (m *AccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountRequest proto.InternalMessageInfo

func (m *AccountRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AccountRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Place represent Place model and its properties
type Place struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Featured             string               `protobuf:"bytes,3,opt,name=featured,proto3" json:"featured,omitempty"`
	Website              string               `protobuf:"bytes,4,opt,name=website,proto3" json:"website,omitempty"`
	Tagline              string               `protobuf:"bytes,5,opt,name=tagline,proto3" json:"tagline,omitempty"`
	Description          string               `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Contact              string               `protobuf:"bytes,7,opt,name=contact,proto3" json:"contact,omitempty"`
	Verified             bool                 `protobuf:"varint,9,opt,name=verified,proto3" json:"verified,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Place) Reset()         { *m = Place{} }
func (m *Place) String() string { return proto.CompactTextString(m) }
func (*Place) ProtoMessage()    {}
func (*Place) Descriptor() ([]byte, []int) {
	return fileDescriptor_hahiye_5a3f7662e55318bd, []int{5}
}
func (m *Place) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Place.Unmarshal(m, b)
}
func (m *Place) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Place.Marshal(b, m, deterministic)
}
func (dst *Place) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Place.Merge(dst, src)
}
func (m *Place) XXX_Size() int {
	return xxx_messageInfo_Place.Size(m)
}
func (m *Place) XXX_DiscardUnknown() {
	xxx_messageInfo_Place.DiscardUnknown(m)
}

var xxx_messageInfo_Place proto.InternalMessageInfo

func (m *Place) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Place) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Place) GetFeatured() string {
	if m != nil {
		return m.Featured
	}
	return ""
}

func (m *Place) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Place) GetTagline() string {
	if m != nil {
		return m.Tagline
	}
	return ""
}

func (m *Place) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Place) GetContact() string {
	if m != nil {
		return m.Contact
	}
	return ""
}

func (m *Place) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func (m *Place) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type Places struct {
	Places               []*Place `protobuf:"bytes,1,rep,name=places,proto3" json:"places,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Places) Reset()         { *m = Places{} }
func (m *Places) String() string { return proto.CompactTextString(m) }
func (*Places) ProtoMessage()    {}
func (*Places) Descriptor() ([]byte, []int) {
	return fileDescriptor_hahiye_5a3f7662e55318bd, []int{6}
}
func (m *Places) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Places.Unmarshal(m, b)
}
func (m *Places) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Places.Marshal(b, m, deterministic)
}
func (dst *Places) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Places.Merge(dst, src)
}
func (m *Places) XXX_Size() int {
	return xxx_messageInfo_Places.Size(m)
}
func (m *Places) XXX_DiscardUnknown() {
	xxx_messageInfo_Places.DiscardUnknown(m)
}

var xxx_messageInfo_Places proto.InternalMessageInfo

func (m *Places) GetPlaces() []*Place {
	if m != nil {
		return m.Places
	}
	return nil
}

type PlaceRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlaceRequest) Reset()         { *m = PlaceRequest{} }
func (m *PlaceRequest) String() string { return proto.CompactTextString(m) }
func (*PlaceRequest) ProtoMessage()    {}
func (*PlaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hahiye_5a3f7662e55318bd, []int{7}
}
func (m *PlaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceRequest.Unmarshal(m, b)
}
func (m *PlaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceRequest.Marshal(b, m, deterministic)
}
func (dst *PlaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceRequest.Merge(dst, src)
}
func (m *PlaceRequest) XXX_Size() int {
	return xxx_messageInfo_PlaceRequest.Size(m)
}
func (m *PlaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceRequest proto.InternalMessageInfo

func (m *PlaceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlaceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Interest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interest) Reset()         { *m = Interest{} }
func (m *Interest) String() string { return proto.CompactTextString(m) }
func (*Interest) ProtoMessage()    {}
func (*Interest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hahiye_5a3f7662e55318bd, []int{8}
}
func (m *Interest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interest.Unmarshal(m, b)
}
func (m *Interest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interest.Marshal(b, m, deterministic)
}
func (dst *Interest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interest.Merge(dst, src)
}
func (m *Interest) XXX_Size() int {
	return xxx_messageInfo_Interest.Size(m)
}
func (m *Interest) XXX_DiscardUnknown() {
	xxx_messageInfo_Interest.DiscardUnknown(m)
}

var xxx_messageInfo_Interest proto.InternalMessageInfo

func (m *Interest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Interest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Interests struct {
	Interests            []*Interest `protobuf:"bytes,1,rep,name=interests,proto3" json:"interests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Interests) Reset()         { *m = Interests{} }
func (m *Interests) String() string { return proto.CompactTextString(m) }
func (*Interests) ProtoMessage()    {}
func (*Interests) Descriptor() ([]byte, []int) {
	return fileDescriptor_hahiye_5a3f7662e55318bd, []int{9}
}
func (m *Interests) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interests.Unmarshal(m, b)
}
func (m *Interests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interests.Marshal(b, m, deterministic)
}
func (dst *Interests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interests.Merge(dst, src)
}
func (m *Interests) XXX_Size() int {
	return xxx_messageInfo_Interests.Size(m)
}
func (m *Interests) XXX_DiscardUnknown() {
	xxx_messageInfo_Interests.DiscardUnknown(m)
}

var xxx_messageInfo_Interests proto.InternalMessageInfo

func (m *Interests) GetInterests() []*Interest {
	if m != nil {
		return m.Interests
	}
	return nil
}

type InterestRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterestRequest) Reset()         { *m = InterestRequest{} }
func (m *InterestRequest) String() string { return proto.CompactTextString(m) }
func (*InterestRequest) ProtoMessage()    {}
func (*InterestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hahiye_5a3f7662e55318bd, []int{10}
}
func (m *InterestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterestRequest.Unmarshal(m, b)
}
func (m *InterestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterestRequest.Marshal(b, m, deterministic)
}
func (dst *InterestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterestRequest.Merge(dst, src)
}
func (m *InterestRequest) XXX_Size() int {
	return xxx_messageInfo_InterestRequest.Size(m)
}
func (m *InterestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InterestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InterestRequest proto.InternalMessageInfo

func (m *InterestRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InterestRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*StatusResponse)(nil), "hahiye.StatusResponse")
	proto.RegisterType((*AuthRequest)(nil), "hahiye.AuthRequest")
	proto.RegisterType((*AuthResponse)(nil), "hahiye.AuthResponse")
	proto.RegisterType((*Account)(nil), "hahiye.Account")
	proto.RegisterType((*AccountRequest)(nil), "hahiye.AccountRequest")
	proto.RegisterType((*Place)(nil), "hahiye.Place")
	proto.RegisterType((*Places)(nil), "hahiye.Places")
	proto.RegisterType((*PlaceRequest)(nil), "hahiye.PlaceRequest")
	proto.RegisterType((*Interest)(nil), "hahiye.Interest")
	proto.RegisterType((*Interests)(nil), "hahiye.Interests")
	proto.RegisterType((*InterestRequest)(nil), "hahiye.InterestRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceClient interface {
	Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/hahiye.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
type AuthServiceServer interface {
	Login(context.Context, *AuthRequest) (*AuthResponse, error)
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hahiye.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hahiye.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hahiye.proto",
}

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountServiceClient interface {
	CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*StatusResponse, error)
	DeleteAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*Account, error)
}

type accountServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountServiceClient(cc *grpc.ClientConn) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/hahiye.AccountService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/hahiye.AccountService/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/hahiye.AccountService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
type AccountServiceServer interface {
	CreateAccount(context.Context, *Account) (*StatusResponse, error)
	DeleteAccount(context.Context, *AccountRequest) (*StatusResponse, error)
	GetAccount(context.Context, *AccountRequest) (*Account, error)
}

func RegisterAccountServiceServer(s *grpc.Server, srv AccountServiceServer) {
	s.RegisterService(&_AccountService_serviceDesc, srv)
}

func _AccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hahiye.AccountService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hahiye.AccountService/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hahiye.AccountService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hahiye.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _AccountService_CreateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _AccountService_DeleteAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccountService_GetAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hahiye.proto",
}

// PlaceServiceClient is the client API for PlaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlaceServiceClient interface {
	AddService(ctx context.Context, in *Place, opts ...grpc.CallOption) (*StatusResponse, error)
	DeletePlace(ctx context.Context, in *PlaceRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetPlace(ctx context.Context, in *PlaceRequest, opts ...grpc.CallOption) (*Place, error)
	GetPlaces(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (PlaceService_GetPlacesClient, error)
}

type placeServiceClient struct {
	cc *grpc.ClientConn
}

func NewPlaceServiceClient(cc *grpc.ClientConn) PlaceServiceClient {
	return &placeServiceClient{cc}
}

func (c *placeServiceClient) AddService(ctx context.Context, in *Place, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/hahiye.PlaceService/AddService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) DeletePlace(ctx context.Context, in *PlaceRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/hahiye.PlaceService/DeletePlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) GetPlace(ctx context.Context, in *PlaceRequest, opts ...grpc.CallOption) (*Place, error) {
	out := new(Place)
	err := c.cc.Invoke(ctx, "/hahiye.PlaceService/GetPlace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *placeServiceClient) GetPlaces(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (PlaceService_GetPlacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PlaceService_serviceDesc.Streams[0], "/hahiye.PlaceService/GetPlaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &placeServiceGetPlacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlaceService_GetPlacesClient interface {
	Recv() (*Places, error)
	grpc.ClientStream
}

type placeServiceGetPlacesClient struct {
	grpc.ClientStream
}

func (x *placeServiceGetPlacesClient) Recv() (*Places, error) {
	m := new(Places)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlaceServiceServer is the server API for PlaceService service.
type PlaceServiceServer interface {
	AddService(context.Context, *Place) (*StatusResponse, error)
	DeletePlace(context.Context, *PlaceRequest) (*StatusResponse, error)
	GetPlace(context.Context, *PlaceRequest) (*Place, error)
	GetPlaces(*empty.Empty, PlaceService_GetPlacesServer) error
}

func RegisterPlaceServiceServer(s *grpc.Server, srv PlaceServiceServer) {
	s.RegisterService(&_PlaceService_serviceDesc, srv)
}

func _PlaceService_AddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Place)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).AddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hahiye.PlaceService/AddService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).AddService(ctx, req.(*Place))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_DeletePlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).DeletePlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hahiye.PlaceService/DeletePlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).DeletePlace(ctx, req.(*PlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_GetPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaceServiceServer).GetPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hahiye.PlaceService/GetPlace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaceServiceServer).GetPlace(ctx, req.(*PlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaceService_GetPlaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlaceServiceServer).GetPlaces(m, &placeServiceGetPlacesServer{stream})
}

type PlaceService_GetPlacesServer interface {
	Send(*Places) error
	grpc.ServerStream
}

type placeServiceGetPlacesServer struct {
	grpc.ServerStream
}

func (x *placeServiceGetPlacesServer) Send(m *Places) error {
	return x.ServerStream.SendMsg(m)
}

var _PlaceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hahiye.PlaceService",
	HandlerType: (*PlaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddService",
			Handler:    _PlaceService_AddService_Handler,
		},
		{
			MethodName: "DeletePlace",
			Handler:    _PlaceService_DeletePlace_Handler,
		},
		{
			MethodName: "GetPlace",
			Handler:    _PlaceService_GetPlace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPlaces",
			Handler:       _PlaceService_GetPlaces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hahiye.proto",
}

// InterestServiceClient is the client API for InterestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterestServiceClient interface {
	AddInterest(ctx context.Context, in *Interest, opts ...grpc.CallOption) (*StatusResponse, error)
	Removeinterest(ctx context.Context, in *InterestRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetInterest(ctx context.Context, in *InterestRequest, opts ...grpc.CallOption) (*Interest, error)
	GetInterests(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (InterestService_GetInterestsClient, error)
}

type interestServiceClient struct {
	cc *grpc.ClientConn
}

func NewInterestServiceClient(cc *grpc.ClientConn) InterestServiceClient {
	return &interestServiceClient{cc}
}

func (c *interestServiceClient) AddInterest(ctx context.Context, in *Interest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/hahiye.InterestService/AddInterest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interestServiceClient) Removeinterest(ctx context.Context, in *InterestRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/hahiye.InterestService/Removeinterest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interestServiceClient) GetInterest(ctx context.Context, in *InterestRequest, opts ...grpc.CallOption) (*Interest, error) {
	out := new(Interest)
	err := c.cc.Invoke(ctx, "/hahiye.InterestService/GetInterest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interestServiceClient) GetInterests(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (InterestService_GetInterestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InterestService_serviceDesc.Streams[0], "/hahiye.InterestService/GetInterests", opts...)
	if err != nil {
		return nil, err
	}
	x := &interestServiceGetInterestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InterestService_GetInterestsClient interface {
	Recv() (*Interests, error)
	grpc.ClientStream
}

type interestServiceGetInterestsClient struct {
	grpc.ClientStream
}

func (x *interestServiceGetInterestsClient) Recv() (*Interests, error) {
	m := new(Interests)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InterestServiceServer is the server API for InterestService service.
type InterestServiceServer interface {
	AddInterest(context.Context, *Interest) (*StatusResponse, error)
	Removeinterest(context.Context, *InterestRequest) (*StatusResponse, error)
	GetInterest(context.Context, *InterestRequest) (*Interest, error)
	GetInterests(*empty.Empty, InterestService_GetInterestsServer) error
}

func RegisterInterestServiceServer(s *grpc.Server, srv InterestServiceServer) {
	s.RegisterService(&_InterestService_serviceDesc, srv)
}

func _InterestService_AddInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestServiceServer).AddInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hahiye.InterestService/AddInterest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestServiceServer).AddInterest(ctx, req.(*Interest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterestService_Removeinterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestServiceServer).Removeinterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hahiye.InterestService/Removeinterest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestServiceServer).Removeinterest(ctx, req.(*InterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterestService_GetInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestServiceServer).GetInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hahiye.InterestService/GetInterest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestServiceServer).GetInterest(ctx, req.(*InterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterestService_GetInterests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InterestServiceServer).GetInterests(m, &interestServiceGetInterestsServer{stream})
}

type InterestService_GetInterestsServer interface {
	Send(*Interests) error
	grpc.ServerStream
}

type interestServiceGetInterestsServer struct {
	grpc.ServerStream
}

func (x *interestServiceGetInterestsServer) Send(m *Interests) error {
	return x.ServerStream.SendMsg(m)
}

var _InterestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hahiye.InterestService",
	HandlerType: (*InterestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddInterest",
			Handler:    _InterestService_AddInterest_Handler,
		},
		{
			MethodName: "Removeinterest",
			Handler:    _InterestService_Removeinterest_Handler,
		},
		{
			MethodName: "GetInterest",
			Handler:    _InterestService_GetInterest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInterests",
			Handler:       _InterestService_GetInterests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hahiye.proto",
}

func init() { proto.RegisterFile("hahiye.proto", fileDescriptor_hahiye_5a3f7662e55318bd) }

var fileDescriptor_hahiye_5a3f7662e55318bd = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0xbe, 0x0e, 0x24, 0x24, 0xc7, 0x21, 0x70, 0xe7, 0x22, 0xae, 0x95, 0x2e, 0x88, 0x2c, 0x2a,
	0x65, 0x95, 0x20, 0x03, 0x2a, 0x15, 0x8b, 0x2a, 0x50, 0x44, 0x51, 0xbb, 0x40, 0xa6, 0xdd, 0x74,
	0x83, 0x8c, 0x7d, 0x12, 0x46, 0xb5, 0x3d, 0xae, 0x67, 0x0c, 0x62, 0xdf, 0x75, 0x1f, 0xaa, 0x4f,
	0xd3, 0x7d, 0x5f, 0xa0, 0xb2, 0x67, 0xc6, 0xe0, 0x44, 0x21, 0xa9, 0xd4, 0x95, 0xf3, 0x9d, 0xdf,
	0x6f, 0xbe, 0x39, 0x67, 0x02, 0xed, 0x5b, 0xef, 0x96, 0x3e, 0xe0, 0x20, 0x49, 0x99, 0x60, 0xa4,
	0x21, 0x51, 0x77, 0x67, 0xc2, 0xd8, 0x24, 0xc4, 0x61, 0x61, 0xbd, 0xc9, 0xc6, 0x43, 0x41, 0x23,
	0xe4, 0xc2, 0x8b, 0x12, 0x19, 0xd8, 0x7d, 0x31, 0x1d, 0x80, 0x51, 0x22, 0x1e, 0xa4, 0xd3, 0x7e,
	0x0f, 0x9d, 0x2b, 0xe1, 0x89, 0x8c, 0xbb, 0xc8, 0x13, 0x16, 0x73, 0x24, 0x3b, 0x60, 0xf2, 0xc2,
	0x72, 0xed, 0xb3, 0x00, 0x2d, 0xa3, 0x67, 0xf4, 0x5b, 0x2e, 0x48, 0xd3, 0x29, 0x0b, 0x90, 0x58,
	0xb0, 0x16, 0x21, 0xe7, 0xde, 0x04, 0xad, 0x5a, 0xe1, 0xd4, 0xd0, 0x3e, 0x03, 0x73, 0x94, 0x89,
	0x5b, 0x17, 0xbf, 0x66, 0xc8, 0x05, 0xe9, 0x42, 0x33, 0xe3, 0x98, 0xc6, 0x5e, 0xa4, 0xcb, 0x94,
	0x38, 0xf7, 0x25, 0x1e, 0xe7, 0xf7, 0x2c, 0x0d, 0x54, 0x95, 0x12, 0xdb, 0xbb, 0xd0, 0x96, 0x65,
	0x14, 0xa3, 0x2d, 0xa8, 0x0b, 0xf6, 0x05, 0x63, 0x55, 0x44, 0x02, 0xfb, 0x97, 0x01, 0x6b, 0x23,
	0xdf, 0x67, 0x59, 0x2c, 0x48, 0x07, 0x6a, 0x34, 0x50, 0xee, 0x1a, 0x0d, 0x08, 0x81, 0xd5, 0xa2,
	0xab, 0xac, 0xbc, 0xaa, 0x3b, 0x96, 0x6c, 0x56, 0x9e, 0x61, 0xb3, 0x5a, 0x65, 0x93, 0x77, 0xc7,
	0xc8, 0xa3, 0xa1, 0x55, 0x97, 0xdd, 0x0b, 0x90, 0xab, 0x94, 0xa4, 0x6c, 0x4c, 0x43, 0xbc, 0xce,
	0xd2, 0xd0, 0x6a, 0x48, 0x95, 0x94, 0xe9, 0x53, 0x1a, 0xe6, 0x25, 0xef, 0x30, 0xa5, 0x63, 0x8a,
	0x81, 0xb5, 0xd6, 0x33, 0xfa, 0x4d, 0xb7, 0xc4, 0xe4, 0x35, 0x80, 0x9f, 0xa2, 0x27, 0x30, 0xb8,
	0xf6, 0x84, 0xd5, 0xec, 0x19, 0x7d, 0xd3, 0xe9, 0x0e, 0xe4, 0x35, 0x0d, 0xf4, 0x35, 0x0d, 0x3e,
	0xea, 0x7b, 0x74, 0x5b, 0x2a, 0x7a, 0x24, 0xec, 0x03, 0xe8, 0xa8, 0x43, 0x6b, 0x95, 0x97, 0x38,
	0xbb, 0xfd, 0xbd, 0x06, 0xf5, 0xcb, 0xd0, 0xf3, 0x71, 0x59, 0xa5, 0xc6, 0xe8, 0x89, 0x2c, 0xc5,
	0x40, 0x2b, 0xa5, 0x71, 0x7e, 0xf9, 0xf7, 0x78, 0xc3, 0xa9, 0x40, 0x25, 0x94, 0x86, 0xb9, 0x47,
	0x78, 0x93, 0x90, 0xc6, 0xa8, 0x94, 0xd2, 0x90, 0xf4, 0xc0, 0x0c, 0x90, 0xfb, 0x29, 0x4d, 0x04,
	0x65, 0xb1, 0xd2, 0xea, 0xa9, 0x29, 0xcf, 0xf5, 0x59, 0x2c, 0x3c, 0x5f, 0x14, 0x5a, 0xb5, 0x5c,
	0x0d, 0x2b, 0x32, 0xb6, 0xfe, 0x9e, 0x8c, 0x43, 0x68, 0x14, 0x7a, 0x70, 0xf2, 0x12, 0x1a, 0x49,
	0xf1, 0xcb, 0x32, 0x7a, 0x2b, 0x7d, 0xd3, 0x59, 0x1f, 0xa8, 0x2d, 0x2b, 0xfc, 0xae, 0x72, 0xda,
	0x0e, 0xb4, 0xa5, 0xe1, 0x0f, 0x54, 0x1f, 0x40, 0xf3, 0x22, 0x16, 0x98, 0x2e, 0x1b, 0x7f, 0x0c,
	0x2d, 0x1d, 0xcf, 0xc9, 0x00, 0x5a, 0x54, 0x03, 0x45, 0x6d, 0x53, 0x53, 0xd3, 0x51, 0xee, 0x63,
	0x88, 0x7d, 0x08, 0x1b, 0xa5, 0x79, 0x79, 0x8e, 0xce, 0xa9, 0x5c, 0xd9, 0x2b, 0x4c, 0xef, 0xa8,
	0x8f, 0xe4, 0x00, 0xea, 0x1f, 0xd8, 0x84, 0xc6, 0xe4, 0x3f, 0xdd, 0xeb, 0xc9, 0x42, 0x77, 0xb7,
	0xaa, 0x46, 0xb9, 0x9e, 0xf6, 0x3f, 0xce, 0x0f, 0xa3, 0x9c, 0x4a, 0x5d, 0xe8, 0x08, 0xd6, 0x4f,
	0x0b, 0xb5, 0xf5, 0x8a, 0x6e, 0x94, 0xb9, 0xd2, 0xd0, 0xdd, 0xd6, 0x86, 0xa9, 0xf7, 0xe7, 0x0d,
	0xac, 0xbf, 0xc5, 0x10, 0x1f, 0x33, 0xb7, 0xa7, 0x32, 0x35, 0x9b, 0x79, 0x05, 0x0e, 0x01, 0xce,
	0x51, 0x2c, 0xca, 0x9e, 0xe6, 0xe3, 0xfc, 0x34, 0xd4, 0x15, 0xeb, 0x23, 0xec, 0x03, 0x8c, 0x82,
	0x40, 0xa3, 0xea, 0x5c, 0xcc, 0x6d, 0x7e, 0x0c, 0xa6, 0x64, 0x2f, 0xd7, 0x6d, 0xab, 0x3a, 0x4d,
	0x0b, 0x98, 0x0f, 0xa1, 0x79, 0x8e, 0xe2, 0xb9, 0xcc, 0x2a, 0x0b, 0x72, 0x08, 0x2d, 0x9d, 0xc0,
	0xc9, 0xf6, 0xcc, 0xe8, 0x9f, 0xe5, 0x0f, 0x7d, 0xb7, 0x53, 0xc9, 0xe1, 0x7b, 0x86, 0xf3, 0xad,
	0xf6, 0x38, 0x2c, 0xfa, 0x7c, 0xaf, 0xc0, 0x1c, 0x05, 0x41, 0x39, 0xaf, 0x33, 0xb3, 0x36, 0x97,
	0xf4, 0x08, 0x3a, 0x2e, 0x46, 0xec, 0x0e, 0xf5, 0x2c, 0x92, 0xff, 0x67, 0xe6, 0x74, 0xc1, 0xb9,
	0x8f, 0xc0, 0x3c, 0x47, 0x71, 0xb1, 0x30, 0x7f, 0x86, 0x14, 0x39, 0x86, 0xf6, 0x93, 0xcc, 0xf9,
	0x1a, 0xfc, 0x3b, 0x9d, 0xc9, 0xf7, 0x8c, 0x93, 0x5d, 0xd8, 0x4c, 0xef, 0xb5, 0x43, 0x7e, 0x4e,
	0x1a, 0xef, 0x8a, 0xef, 0xa5, 0xf1, 0x59, 0xfd, 0xbf, 0xde, 0x34, 0x8a, 0x52, 0xfb, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xbe, 0x2b, 0x1c, 0xe7, 0x7e, 0x07, 0x00, 0x00,
}
